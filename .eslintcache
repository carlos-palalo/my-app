[{"C:\\Proyectos_React\\my-app\\src\\index.js":"1","C:\\Proyectos_React\\my-app\\src\\reportWebVitals.js":"2","C:\\Proyectos_React\\my-app\\src\\App.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":6545,"mtime":1612027440413,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"tfcvn0",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Proyectos_React\\my-app\\src\\index.js",[],["16","17"],"C:\\Proyectos_React\\my-app\\src\\reportWebVitals.js",[],"C:\\Proyectos_React\\my-app\\src\\App.js",["18"],"import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';\nimport axios from 'axios';\n\nfunction App() {\n  const baseUrl = \"http://localhost:5000/users/\";\n  const [data, setData] = useState([]);\n  const [modalInsertar, setModalInsertar] = useState(false);\n  const [modalEditar, setModalEditar] = useState(false);\n  const [modalEliminar, setModalEliminar] = useState(false);\n  const [frameworkSeleccionado, setFrameworkSeleccionado] = useState({\n    id: '',\n    firstName: '',\n    lastName: ''\n  });\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFrameworkSeleccionado((prevState) => ({\n      ...prevState,\n      [name]: value\n    }))\n    console.log(frameworkSeleccionado);\n  }\n\n  const abrirCerrarModalInsertar=()=>{\n    setModalInsertar(!modalInsertar);\n  }\n\n  const abrirCerrarModalEditar=()=>{\n    setModalEditar(!modalEditar);\n  }\n\n  const abrirCerrarModalEliminar=()=>{\n    setModalEliminar(!modalEliminar);\n  }\n\n  const peticionGet = async () => {\n    await axios.get(baseUrl)\n      .then(response => {\n        setData(response.data);\n      }).catch(error => {\n        console.log(error);\n      })\n  }\n\n  const peticionPost = async () => {\n    var f = new FormData();\n    f.append(\"firstName\", frameworkSeleccionado.firstName);\n    f.append(\"lastName\", frameworkSeleccionado.lastName);\n    //f.append(\"METHOD\", \"POST\");\n    console.log(f.get);\n    await axios.post(baseUrl, f)\n      .then(response => {\n        setData(data.concat(response.data));\n        //cerramos la ventana modal\n        abrirCerrarModalInsertar();\n        \n        //refresco la tabla haciendo una peticion get\n        peticionGet();\n        \n      }).catch(error => {\n        console.log(error);\n      })\n  }\n\n  const peticionPut=async()=>{\n    \n    //console.log(frameworkSeleccionado);\n   \n     // Codificar nuestro framework como JSON\n    const frameworkJSON = JSON.stringify(frameworkSeleccionado);\n        // ¡Y enviarlo!\n       \n    await axios.put(baseUrl, frameworkJSON, {params: {id: frameworkSeleccionado.id}})\n    .then(response=>{\n      var dataNueva= data;\n      //lo siguiente es un bucle que recorre toda la tabla para encontrar el elemento\n      //seleccionado por el id\n      dataNueva.map(framework=>{\n        //console.log(framework.id);\n        if(framework.id===frameworkSeleccionado.id){\n          framework.firstName=frameworkSeleccionado.firstName;\n          framework.lastName=frameworkSeleccionado.lastName;\n        }\n      });\n      console.log(dataNueva);\n      setData(dataNueva);\n      abrirCerrarModalEditar();\n      //refresco la tabla haciendo una peticion put\n      peticionGet();\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\n  const peticionDelete=async()=>{\n\n   \n    axios.delete(baseUrl,  {params: {id: frameworkSeleccionado.id}}).then(response=>{\n   \n    abrirCerrarModalEliminar();\n       //refresco la tabla haciendo una peticion delete\n       peticionGet();\n     \n    }).catch(error=>{\n      console.log(error);\n     \n    })\n  }\n\n  const seleccionarFramework=(framework, caso)=>{\n    setFrameworkSeleccionado(framework);\n\n    (caso===\"Editar\")?\n    abrirCerrarModalEditar():\n    abrirCerrarModalEliminar()\n  }\n\n  useEffect(() => {\n    peticionGet();\n  }, [])\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <br />\n      <button className=\"btn btn-success\" onClick={() => abrirCerrarModalInsertar()}>Insertar</button>\n      <br /><br />\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Nombre</th>\n            <th>Apellido</th>\n            <th>Acciones</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map(framework => (\n            <tr key={framework.id}>\n              <td>{framework.id}</td>\n              <td>{framework.firstName}</td>\n              <td>{framework.lastName}</td>\n              <td>\n                <button className=\"btn btn-primary\" onClick={() => seleccionarFramework(framework, \"Editar\")}>Editar</button>\n                <button className=\"btn btn-danger\" onClick={() => seleccionarFramework(framework, \"Eliminar\")}>Eliminar</button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <Modal isOpen={modalInsertar}>\n        <ModalHeader>Insertar Framework</ModalHeader>\n        <ModalBody>\n          <div className=\"form-group\">\n            <label>Nombre: </label>\n            <br />\n            <input type=\"text\" className=\"form-control\" name=\"firstName\" onChange={handleChange} />\n            <br />\n            <label>Apellido: </label>\n            <br />\n            <input type=\"text\" className=\"form-control\" name=\"lastName\" onChange={handleChange} />\n            <br />\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <button className=\"btn btn-primary\" onClick={() => peticionPost()}>Insertar</button>{\"   \"}\n          <button className=\"btn btn-danger\" onClick={() => abrirCerrarModalInsertar()}>Cancelar</button>\n        </ModalFooter>\n      </Modal>\n\n      <Modal isOpen={modalEditar}>\n      <ModalHeader>Editar Framework</ModalHeader>\n      <ModalBody>\n        <div className=\"form-group\">\n          <label>Nombre: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"firstName\" onChange={handleChange} value={frameworkSeleccionado && frameworkSeleccionado.firstName}/>\n          <br />\n          <label>Apellido: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"lastName\" onChange={handleChange} value={frameworkSeleccionado && frameworkSeleccionado.lastName}/>\n          <br />\n        </div>\n      </ModalBody>\n      <ModalFooter>\n        <button className=\"btn btn-primary\" onClick={()=>peticionPut()}>Modificar</button>{\"   \"}\n        <button className=\"btn btn-danger\" onClick={()=>abrirCerrarModalEditar()}>Cancelar</button>\n      </ModalFooter>\n    </Modal>\n\n    <Modal isOpen={modalEliminar}>\n        <ModalBody>\n        ¿Estás seguro que deseas eliminar el Framework {frameworkSeleccionado && frameworkSeleccionado.firstName}?\n        </ModalBody>\n        <ModalFooter>\n          <button className=\"btn btn-danger\" onClick={()=>peticionDelete()}>\n            Sí\n          </button>\n          <button className=\"btn btn-secondary\" onClick={()=>abrirCerrarModalEliminar()} >\n            No\n          </button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":81,"column":30,"nodeType":"25","messageId":"26","endLine":81,"endColumn":32},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]